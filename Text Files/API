--[[

Placement Service API


FUNCTIONS

placementInfo PlacementService.new(
	int grid,
	obj objectLocation,
	Enum rotateInput, Enum terminateInput, Enum raiseInput, Enum lowerInput,
	Enum xboxRotateInput, Enum xboxTerminateInput, Enum xboxRaisInpute, Enum xboxLowerInput,
	Instance(s) ignoredObjects ...
)
							
void placementInfo:terminate()
Terminates the current placement (if placement is active)

void placementInfo:activate(string objectName, obj location where the model will be placed, obj plane/plot, bool stackable, bool smart rotation, bool autoPlace)
Activates placement

void placementInfo:noPlotActivate(string objectName, obj location where the model will be placed, bool smart rotation, bool autoPlace)
Activates a non plot dependant placement

void placementInfo:requestPlacement(Instance RemoteFunction, function callback)
Requests a server sided placement. Callback is not required

void placementInfo:haltPlacement() - Stops automatic placement (autoPlace must be true)
Freezes the current placement if autoPlace is set to true

void placementInfo:pauseCurrentState()
Pauses the current state of placement

void placementInfo:resume()
Resumes the current state of placement

void placementInfo:editAttribute(string attributeName, var input)
Edits the inputted attribute (if avaliable) value with the input value

void placementInfo:rotate()
Manually rotates the object (used for mobile support)

void placementInfo:raise()
Manually raises the objects "floor" (used for mobile support)

void placementInfo:lower()
Manually lowers the objects "floor" (used for mobile support)

string placementInfo:getCurrentState()
Returns the current state of placement

string placementInfo:getPlatform()
Returns the current platform the user is using


EVENTS

void placementInfo.Activated

void placementInfo.Placed

void placementInfo.Rotated

void placementInfo.Terminated

obj placementInfo.Collided

bool placementInfo.ChangedFloors


CODE:

-- Client --

local PlacementService = require(game.ReplicatedStorage.location.PlacementService)

local remote = game.ReplicatedStorage.location.requestPlacement

local player = game:GetService("Players").LocalPlayer
local mouse = player:GetMouse()

local plot = plotLocation

local button = buttonLocation

local placementInfo = PlacementService.new(
	2,
	game.ReplicatedStorage.location,
	Enum.KeyCode.R, Enum.KeyCode.X, Enum.KeyCode.U, Enum.KeyCode.L,
	Enum.KeyCode.ButtonB, Enum.KeyCode.ButtonA, Enum.KeyCode.ButtonX, Enum.KeyCode.ButtonY
)

button.MouseButton1Click:Connect(function()
	itemPlacement:activate("Wall", plot.PlacedObjectsLocation, plot.PlotLocation, true, true, true)
end)

local function optionalCallback()
	print("Object has been placed")
end

mouse.Button1Down:Connect(function()
	itemPlacement:requestPlacement(remote, optionalCallback)
end)

-- If you have autoplace enabled
mouse.Button1Up:Connect(function()
	itemPlacement:haltPlacement()
end)

-- Server --

local replicatedStorage = game:GetService("ReplicatedStorage")

-- Ignore the top three functions
local function checkHitbox(character, object)
	if not object then return false end	
	local collisionPoints = workspace:GetPartsInPart(object.PrimaryPart)

	-- Checks if there is collision on any object that is not a child of the object and is not a child of the player
	for i = 1, #collisionPoints, 1 do
		if not collisionPoints[i].CanTouch then continue end
		if not (not collisionPoints[i]:IsDescendantOf(object) and not collisionPoints[i]:IsDescendantOf(character)) then continue end

		return true
	end

	return false
end

-- Checks if the object exceeds the boundries given by the plot
local function checkBoundaries(plot: BasePart, primary: BasePart): boolean
	local pos: CFrame = plot.CFrame
	local size: Vector3 = CFrame.fromOrientation(0, primary.Orientation.Y*math.pi/180, 0)*primary.Size
	local currentPos: CFrame = pos:Inverse()*primary.CFrame

	local xBound: number = (plot.Size.X - size.X)
	local zBound: number = (plot.Size.Z - size.Z)

	return currentPos.X > xBound or currentPos.X < -xBound or currentPos.Z > zBound or currentPos.Z < -zBound
end

local function handleCollisions(character: Model, item, collisions: boolean): boolean
	if not collisions then item.PrimaryPart.Transparency = 1; return true end
	
	local collision = checkHitbox(character, item)
	if collision then item:Destroy(); return false end
	
	item.PrimaryPart.Transparency = 1
	return true
end

--Ignore above

-- Edit if you want to have a server check if collisions are enabled or disabled
local function getCollisions(name: string): boolean
	return true
end

local function place(player, name: string, location: Instance, prefabs: Instance, cframe: CFrame, plot: BasePart)
	local collisions = getCollisions(name)
	local item = prefabs:FindFirstChild(name):Clone()
	item.PrimaryPart.CanCollide = false
	item:PivotTo(cframe)
	
	if plot then
		if checkBoundaries(plot, item.PrimaryPart) then 
			return 
		end

		item.Parent = location

		return handleCollisions(player.Character, item, collisions)
	end
	
	return handleCollisions(player.Character, item, collisions)
end

replicatedStorage.remotes.functions.requestPlacement.OnServerInvoke = REMOTE_FUNCTION

]]

-- Created and written by zblox164 (2020-2022)
